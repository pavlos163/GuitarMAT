import sys
import os

path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if not path in sys.path:
  sys.path.insert(1, path)
del path

import app
import librosa
import difflib
from util import *
from duration import get_durations

APP_ROOT = app.APP_ROOT
AUDIO_FOLDER = os.path.join(APP_ROOT, 'static/audio/dataset/single/')

def eval():
  scores = []

  scores.append(get_score(
    'softkitty.mp3',
    [70, 137, 163, 201, 266, 298, 327, 361, 391, 421, 454, 586,
     618, 651, 676, 713, 745, 777, 809, 841, 912, 978],
    [1.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 2.0]))
  scores.append(get_score(
    'dad.mp3',
    [52, 68, 98, 114, 137, 158, 179, 270, 314, 354, 397, 443, 527,
     573, 596, 616, 634, 655, 677, 697, 785, 829, 871, 913, 959, 1046,
     1089, 1111, 1132, 1151, 1173, 1194, 1216, 1303, 1346, 1387, 1431,
     1474, 1564, 1606, 1627, 1647, 1666, 1686, 1705, 1728, 1770, 1816,
     1855, 1905, 1949, 1995, 2125],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 0.5, 0.5,
     0.5, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 0.5, 0.5, 0.5,
     0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 3.0]))
  scores.append(get_score(
    'dad2.mp3',
    [67, 177, 274, 301, 324, 348, 374, 427, 480, 587, 687, 714, 736,
     760, 786, 840, 895, 920, 945, 968, 996, 1021, 1044, 1067, 1099,
     1151, 1204, 1258, 1308, 1334, 1359, 1385, 1409, 1434, 1459, 1484,
     1511, 1564, 1620],
    [2.0, 2.0, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 2.0, 2.0, 0.5, 0.5, 0.5, 0.5,
     1.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 2.0]))
  scores.append(get_score(
    'frerejacques.mp3',
    [222, 265, 307, 349, 393, 437, 478, 523, 566, 609, 653, 740, 781,
     824, 910, 934, 953, 974, 995, 1037, 1080, 1105, 1123, 1142, 1165,
     1208, 1252, 1295, 1341, 1426, 1473, 1518],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0,
     2.0, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0,
     1.0, 1.0, 2.0, 1.0, 1.0, 2.0]))
  scores.append(get_score(
    'astatamalakia.mp3',
    [221, 291, 331, 403, 443, 516, 554, 664, 736, 774, 811, 845, 884,
     997, 1109, 1179, 1216, 1290, 1329, 1400, 1440, 1549, 1622, 1661,
     1696, 1731, 1771, 1881, 1918, 1954, 1992, 2067, 2105, 2140, 2176,
     2214, 2288, 2325, 2432, 2510, 2548, 2585, 2618, 2657, 2767, 2880,
     2955, 2992, 3028, 3062, 3102, 3175, 3213, 3319, 3397, 3432, 3467,
     3503, 3540, 3580, 3618, 3655],
    [2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 3.0, 3.0,
     2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0,
     1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 1.0, 1.0,
     1.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0, 3.0]))
  scores.append(get_score(
    'eam.mp3',
    [220, 284, 303, 365, 385, 405, 420, 441, 462, 503, 546, 613, 635, 690,
     712, 731, 749, 770, 789, 811, 832, 852, 877, 919, 961, 1003, 1018, 1043,
     1067, 1083, 1104, 1125, 1165, 1232, 1271, 1293, 1356, 1377, 1394, 1413,
     1434, 1453, 1475, 1495, 1515, 1537, 1579, 1621, 1663, 1683, 1703, 1728,
     1745, 1765, 1786, 1827, 1894, 1930, 1952, 2016, 2037, 2056, 2076, 2094,
     2117],
    [1.5, 0.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.5, 0.5, 1.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.5, 1.0, 0.5, 1.5, 0.5, 0.5, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5,
     0.5, 0.5, 1.0, 1.5, 1.0, 0.5, 1.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.5]))
  scores.append(get_score(
    'fragkosirianinobass.mp3',
    [114, 130, 146, 168, 202, 220, 256, 275, 308, 326, 358, 378, 409, 428,
     461, 482, 511, 531, 565, 585, 614, 635, 668, 687, 719, 739, 769, 791,
     841, 858, 874, 894, 944, 962, 978, 1000, 1032, 1051, 1083, 1103, 1134,
     1153, 1188, 1208, 1239, 1258, 1289, 1310, 1340, 1361, 1393, 1413, 1446,
     1465, 1496, 1516, 1548, 1566, 1584, 1599, 1621, 1668, 1719],
    [0.33, 0.33, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67,
     0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67,
     0.33, 0.67, 0.33, 1.0, 0.33, 0.33, 0.33, 1.0, 0.33, 0.33, 0.33, 0.67, 0.33,
     0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33,
     0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.67, 0.33, 0.33, 0.33, 0.33, 0.67,
     1.0, 1.0]))
  scores.append(get_score(
    'nisiotiko.mp3',
    [108, 136, 151, 164, 178, 192, 207, 221, 234,
     248, 260, 273, 286, 300, 331, 357, 370, 384, 397, 410, 425,
     440, 467, 494, 524, 553, 577, 592, 604, 616, 630, 645, 656,
     668, 680, 693, 707, 720, 733, 761, 773, 786, 798, 812, 826,
     837, 850, 866],
    [0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
     0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25,
     0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25,
     0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25,
     0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5]))
  scores.append(get_score(
    'prwinotsigaro.mp3',
    [151, 181, 203, 223, 249, 281, 306, 325, 351, 377, 403, 423, 454, 563,
     597, 618, 636, 663, 695, 715, 733, 768, 879, 1083, 1111, 1133, 1156,
     1180, 1209, 1231, 1252, 1279, 1307, 1329, 1349, 1384, 1498, 1528,
     1549, 1568, 1594, 1623, 1648, 1666, 1697, 1807, 2011, 2042, 2063,
     2085, 2111, 2145, 2166, 2186, 2214, 2242, 2266, 2286, 2317, 2429,
     2453, 2478, 2500, 2527, 2552, 2577, 2601, 2633, 2740, 2825],
    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 4.0, 0.5, 0.5, 0.5, 0.5, 0.5,
     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     0.5, 0.5, 2.0, 4.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
     0.5, 0.5, 2.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 4.0]))

  print "Average score:"
  print sum(scores) / float(len(scores))

def get_score(filename, onset_frames, correct):
  print filename

  y, sr = librosa.load(AUDIO_FOLDER + filename, sr=44100)

  tempo = get_tempo(y)
  durations = get_durations(onset_frames, tempo)

  s = difflib.SequenceMatcher(None, [round(dur, 2) for dur in durations], correct)
  score = s.ratio()
  if score != 1.:
    print "Correct was:\n{} but found:\n{}".format(correct, durations)
  print "Score: {}".format(score)
  return score

if __name__ == "__main__":
  eval()