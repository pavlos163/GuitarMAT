## EVALUATION OF THE SINGLE PITCH DETECTION METHOD ##

import sys
import os

path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if not path in sys.path:
  sys.path.insert(1, path)
del path

import app
import difflib
import librosa
from onset import get_onset_frames
from pitch import get_pitches
from filter import bandpass_filter, highpass_filter
from util import *
import essentia.standard as ess
import essentia
from scipy.signal import medfilt

APP_ROOT = app.APP_ROOT
AUDIO_FOLDER = os.path.join(APP_ROOT, 'static/audio/dataset')

def eval():
  scores = []

  scores.append(get_score('Guitar.ff.sulA.C4E4.mp3',
    [5, 810, 1662, 2205, 2736],
    [['C4'], ['C#4'], ['D4'], ['D#4'], ['E4']]))
  scores.append(get_score('Guitar.ff.sulB.B3.mp3',
    [1],
    [['B3']]))
  scores.append(get_score('Guitar.ff.sulB.C4B4.mp3',
    [1, 662, 1206, 1778, 2513, 3175,
     3806, 4543, 5292, 5852, 6453, 6897],
    [['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'], ['F4'], ['F#4'], ['G4'],
    ['G#4'], ['A4'], ['A#4'], ['B4']]))
  scores.append(get_score('Guitar.ff.sulB.C5Gb5.mp3',
    [2, 433, 941, 1414, 1958, 2413, 2809],
    [['C5'], ['C#5'], ['D5'], ['D#5'], ['E5'], ['F5'], ['F#5']]))
  scores.append(get_score('Guitar.ff.sulD.C4Ab4.mp3',
    [0, 708, 1410, 2295, 3074, 3984, 4588,
     5189, 5644],
    [['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'], ['F4'], ['F#4'],
    ['G4'], ['G#4']]))
  scores.append(get_score('Guitar.ff.sulD.D3B3.mp3',
    [1, 1720, 3088, 4237, 5190, 5837, 6557,
     7087, 7968, 8675],
    [['D3'], ['D#3'], ['E3'], ['F3'], ['F#3'], 
    ['G3'], ['G#3'], ['A3'], ['A#3'], ['B3']]))
  scores.append(get_score('Guitar.ff.sul_E.E4B4.mp3',
    [0, 574, 1191, 1810, 2501, 3074, 3737, 4295],
    [['E4'], ['F4'], ['F#4'], ['G4'], ['G#4'], ['A4'], ['A#4'], ['B4']]))
  scores.append(get_score('Guitar.pp.sulG.C5Db5.mp3',
    [3, 515],
    [['C5'], ['C#5']]))
  scores.append(get_score('Guitar.pp.sulG.G3B3.mp3',
    [2, 736, 1487, 2282, 3015],
    [['G3'], ['G#3'], ['A3'], ['A#3'], ['B3']]))
  scores.append(get_score('Guitar_ff_sul_E_C5Bb5.mp3',
    [1, 561, 1120, 1677, 2178, 2781, 3339,
     3869, 4354, 4882, 5486],
    [['C5'], ['C#5'], ['D5'], ['D#5'], ['E5'], ['F5'], ['F#5'], ['G5'],
    ['G#5'], ['A5'], ['A#5']]))
  scores.append(get_score('Guitar_ff_sulE_C3B3.mp3',
    [2, 748, 1597, 2961, 3832, 4420, 4816, 5596,
     6241, 6809, 7701, 8631],
    [['C3'], ['C#3'], ['D3'], ['D#3'], ['E3'], ['F3'], ['F#3'], ['G3'],
    ['G#3'], ['A3'], ['A#3'], ['B3']]))
  scores.append(get_score('Guitar.mf.sulA.A2B2.mp3',
    [11, 1079, 2032],
    [['A2'], ['A#2'], ['B2']]))
  scores.append(get_score('Guitar.mf.sulA.C4E4.mp3',
    [3, 839, 1487, 2192, 2839],
    [['C4'], ['C#4'], ['D4'], ['D#4'], ['E4']]))
  scores.append(get_score('Guitar.mf.sulB.B3.mp3',
    [0],
    [['B3']]))
  scores.append(get_score('Guitar.ff.sulG.C4B4.mp3',
    [1, 736, 1646, 2427, 3155, 3947, 4594,
     5219, 5932, 6689, 7410, 8233],
    [['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'], ['F4'], ['F#4'], ['G4'],
    ['G#4'], ['A4'], ['A#4'], ['B4']]))
  scores.append(get_score('Guitar.ff.sul_E.E4B4.mp3',
    [0, 574, 1191, 1810, 2501, 3074, 3737, 4295],
    [['E4'], ['F4'], ['F#4'], ['G4'],
    ['G#4'], ['A4'], ['A#4'], ['B4']]))
  scores.append(get_score('Guitar.ff.sulG.G3B3.mp3',
    [0, 794, 1485, 2132, 2823],
    [['G3'], ['G#3'], ['A3'], ['A#3'], ['B3']]))
  scores.append(get_score('Guitar.ff.sulG.C5Db5.mp3',
    [0, 604],
    [['C5'], ['C#5']]))
  scores.append(get_score('1stSTRING.wav',
    [191, 468, 721, 957, 1197, 1433, 1669, 1941, 2189,
     2431, 2669, 2908, 3143, 3390, 3624, 3863, 4107,
     4347, 4588, 4822, 5064, 5295, 5526],
    [['E4'], ['F4'], ['F#4'], ['G4'], ['G#4'], 
    ['A4'], ['A#4'], ['B4'], ['C5'], ['C#5'],
    ['D5'], ['D#5'], ['E5'], ['F5'], ['F#5'],
    ['G5'], ['G#5'], ['A5'], ['A#5'], ['B5'],
    ['C6'], ['C#6'], ['E4']]))
  scores.append(get_score('2ndSTRING.wav',
    [195, 409, 630, 841, 1053, 1263, 1475, 1690, 1909,
     2126, 2349, 2562, 2775, 2984, 3198, 3404, 3603,
     3816, 4008, 4208, 4411, 4610, 4816],
    [['B3'], ['C4'], ['C#4'], ['D4'], ['D#4'], 
    ['E4'], ['F4'], ['F#4'], ['G4'], ['G#4'],
    ['A4'], ['A#4'], ['B4'], ['C5'], ['C#5'],
    ['D5'], ['D#5'], ['E5'], ['F5'], ['F#5'],
    ['G5'], ['G#5'], ['B3']]))
  scores.append(get_score('3rdSTRING.wav',
    [116, 314, 509, 705, 899, 1103, 1301, 1489, 1683,
     1874, 2070, 2265, 2456, 2650, 2848, 3042, 3231,
     3419, 3596, 3782, 3965, 4146],
    [['G3'], ['G#3'], ['A3'], ['A#3'], ['B3'], 
    ['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'],
    ['F4'], ['F#4'], ['G4'], ['G#4'], ['A4'],
    ['A#4'], ['B4'], ['C5'], ['C#5'], ['D5'],
    ['D#5'], ['E5']]))
  scores.append(get_score('4thSTRING.wav',
    [141, 333, 519, 699, 881, 1064, 1252, 1441, 1633,
     1820, 2003, 2183, 2370, 2546, 2732, 2913, 3102,
     3292, 3487, 3670, 3857, 4033, 4219],
    [['D3'], ['D#3'], ['E3'], ['F3'], ['F#3'], 
    ['G3'], ['G#3'], ['A3'], ['A#3'], ['B3'],
    ['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'],
    ['F4'], ['F#4'], ['G4'], ['G#4'], ['A4'],
    ['A#4'], ['B4'], ['D3']]))
  scores.append(get_score('5thSTRING.wav',
    [139, 313, 495, 673, 866, 1047, 1230, 1411, 1590,
     1767, 1944, 2125, 2310, 2497, 2686, 2867, 3046,
     3220, 3406, 3586, 3756, 3933, 4123, 4309],
    [['A2'], ['A#2'], ['B2'], ['C3'], ['C#3'],
    ['D3'], ['D#3'], ['E3'], ['F3'], ['F#3'],
    ['G3'], ['G#3'], ['A3'], ['A#3'], ['B3'],
    ['C4'], ['C#4'], ['D4'], ['D#4'], ['E4'],
    ['F4'], ['F#4'], ['A2']]))
  scores.append(get_score('6thSTRING.wav',
    [121, 298, 475, 661, 844, 1028, 1211, 1401, 1590,
     1779, 1965, 2149, 2333, 2515, 2695, 2878, 3060,
     3239, 3422, 3598, 3777, 3974, 4160],
    [['E2'], ['F2'], ['F#2'], ['G2'], ['G#2'], 
    ['A2'], ['A#2'], ['B2'], ['C3'], ['C#3'],
    ['D3'], ['D#3'], ['E3'], ['F3'], ['F#3'],
    ['G3'], ['G#3'], ['A3'], ['A#3'], ['B3'],
    ['C4'], ['C#4'], ['E2']]))
  scores.append(get_score('softkitty.mp3',
    [70, 137, 163, 201, 266, 298, 327, 361, 391, 421, 454, 586,
     618, 651, 676, 713, 745, 777, 809, 841, 912, 978],
    [['D4'], ['B3'], ['B3'], ['C4'], ['A3'], ['A3'],
    ['G3'], ['A3'], ['B3'], ['C4'], ['D4'], ['D4'],
    ['D4'], ['B3'], ['B3'], ['C4'], ['C4'], ['A3'],
    ['A3'], ['G3'], ['A3'], ['G3']]))
  scores.append(get_score('cmajor.wav',
    [188, 235, 279, 321, 363, 405, 449, 489, 531, 572, 612,
     653, 695, 734, 776, 816, 857, 897, 935, 977, 1017,
     1058, 1099, 1139, 1179, 1219, 1258, 1298, 1340],
    [['C3'], ['D3'], ['E3'], ['F3'], ['G3'], ['A3'],
    ['B3'], ['C4'], ['D4'], ['E4'], ['F4'], ['G4'],
    ['A4'], ['B4'], ['C5'], ['B4'], ['A4'], ['G4'],
    ['F4'], ['E4'], ['D4'], ['C4'], ['B3'], ['A3'],
    ['G3'], ['F3'], ['E3'], ['D3'], ['C3']]))
  scores.append(get_score('eam.mp3',
    [220, 284, 303, 365, 385, 405, 420, 441, 462, 503, 546, 613, 635, 690,
     712, 731, 749, 770, 789, 811, 832, 852, 877, 919, 961, 1003, 1018, 1043,
     1067, 1083, 1104, 1125, 1165, 1232, 1271, 1293, 1356, 1377, 1394, 1413,
     1434, 1453, 1475, 1495, 1515, 1537, 1579, 1621, 1663, 1683, 1703, 1728,
     1745, 1765, 1786, 1827, 1894, 1930, 1952, 2016, 2037, 2056, 2076, 2094,
     2117],
    [['A3'], ['B3'], ['C4'], ['A3'], ['C4'], ['C4'],
    ['B3'], ['A3'], ['B3'], ['E3'], ['B3'], ['C4'],
    ['D4'], ['B3'], ['D4'], ['D4'], ['C4'], ['B3'],
    ['A3'], ['B3'], ['C4'], ['D4'], ['E4'], ['A4'],
    ['G4'], ['A4'], ['G4'], ['F4'], ['F4'], ['E4'],
    ['D4'], ['E4'], ['A3'], ['F4'], ['D4'], ['E4'],
    ['C4'], ['D4'], ['D4'], ['C4'], ['B3'], ['A3'],
    ['B3'], ['C4'], ['D4'], ['E4'], ['A4'], ['G4'],
    ['A4'], ['G4'], ['F4'], ['F4'], ['E4'], ['D4'],
    ['E4'], ['A3'], ['F4'], ['D4'], ['E4'], ['C4'],
    ['D4'], ['D4'], ['C4'], ['B3'], ['A3']]))
  scores.append(get_score('frerejacques.mp3',
    [222, 265, 307, 349, 393, 437, 478, 523, 566, 609, 653, 740, 781,
     824, 910, 934, 953, 974, 995, 1037, 1080, 1105, 1123, 1142, 1165,
     1208, 1252, 1295, 1341, 1426, 1473, 1518],
    [['C3'], ['D3'], ['E3'], ['C3'], ['C3'], ['D3'],
    ['E3'], ['C3'], ['E3'], ['F3'], ['G3'], ['E3'],
    ['F3'], ['G3'], ['G3'], ['A3'], ['G3'], ['F3'],
    ['E3'], ['C3'], ['G3'], ['A3'], ['G3'], ['F3'],
    ['E3'], ['C3'], ['C3'], ['G2'], ['C3'], ['C3'],
    ['G2'], ['C3']]))
  scores.append(get_score('astatamalakia.mp3',
    [221, 291, 331, 403, 443, 516, 554, 664, 736, 774, 811, 845, 884,
     997, 1109, 1179, 1216, 1290, 1329, 1400, 1440, 1549, 1622, 1661,
     1696, 1731, 1771, 1881, 1918, 1954, 1992, 2067, 2105, 2140, 2176,
     2214, 2288, 2325, 2432, 2510, 2548, 2585, 2618, 2657, 2767, 2880,
     2955, 2992, 3028, 3062, 3102, 3175, 3213, 3319, 3397, 3432, 3467,
     3503, 3540, 3580, 3618, 3655],
     [['A3'], ['A3'], ['D4'], ['E4'], ['F4'], ['E4'],
     ['D4'], ['E4'], ['E4'], ['C#4'], ['D4'], ['E4'],
     ['D4'], ['A3'], ['A3'], ['A3'], ['D4'], ['E4'],
     ['F4'], ['E4'], ['D4'], ['E4'], ['E4'], ['C#4'],
     ['D4'], ['E4'], ['D4'], ['D4'], ['E4'], ['F4'],
     ['G4'], ['G4'], ['G4'], ['A4'], ['G4'], ['F4'],
     ['F4'], ['F4'], ['E4'], ['E4'], ['E4'], ['F4'],
     ['E4'], ['D4'], ['A4'], ['G4'], ['G4'], ['G4'],
     ['A4'], ['G4'], ['F4'], ['F4'], ['F4'], ['E4'],
     ['E4'], ['C#4'], ['D4'], ['E4'], ['D4'], ['F4'],
     ['A4'], ['D4']]))
  scores.append(get_score('fragkosirianinobass.mp3',
    [114, 130, 146, 168, 202, 220, 256, 275, 308, 326, 358, 378, 409, 428,
     461, 482, 511, 531, 565, 585, 614, 635, 668, 687, 719, 739, 769, 791,
     841, 858, 874, 894, 944, 962, 978, 1000, 1032, 1051, 1083, 1103, 1134,
     1153, 1188, 1208, 1239, 1258, 1289, 1310, 1340, 1361, 1393, 1413, 1446,
     1465, 1496, 1516, 1548, 1566, 1584, 1599, 1621, 1668, 1719],
    [['D5'], ['D5'], ['D5'], ['D5'], ['E5'], ['D5'],
    ['A4'], ['A4'], ['A#4'], ['A4'], ['G4'], ['G4'],
    ['A4'], ['G4'], ['F4'], ['F4'], ['G4'], ['F4'],
    ['E4'], ['E4'], ['F4'], ['F4'], ['E4'], ['E4'],
    ['D4'], ['C#4'], ['D4'], ['E4'], ['G4'], ['F#4'],
    ['F4'], ['E4'], ['E4'], ['F4'], ['F#4'], ['G4'],
    ['A4'], ['G4'], ['F4'], ['F4'], ['G4'], ['F4'],
    ['E4'], ['E4'], ['F4'], ['E4'], ['D4'], ['D4'],
    ['E4'], ['D4'], ['C#4'], ['C#4'], ['D4'], ['E4'],
    ['F4'], ['G4'], ['F4'], ['E4'], ['F4'], ['E4'],
    ['D4'], ['A3'], ['D4']]))
  



  print "Average score:"
  scores = remove_values_from_list(scores, -1)
  print sum(scores) / float(len(scores))

def get_score(filename, correct):
  print filename
  y, sr = librosa.load(AUDIO_FOLDER + filename, sr=44100)
  
  onset_frames = get_onset_frames(y, sr)

  result = pitches_to_notes(get_pitches(y, sr, onset_frames, method='autocorr'))

  s = difflib.SequenceMatcher(None, flatten(result), flatten(correct))
  if len(result) != len(correct):
    print "Onset mistake, ignoring."
    return -1
  score = s.ratio()
  if score != 1.:
    print "Correct was:\n{} but found:\n{}".format(correct, result)
  print "Score: {}".format(score)
  return score

if __name__ == "__main__":
  eval()
